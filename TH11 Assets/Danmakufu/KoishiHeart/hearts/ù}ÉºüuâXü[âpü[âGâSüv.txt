#東方弾幕風
#Title[抑制「スーパーエゴ」]
#Text[がんばった。オブジェクト弾を無駄に使った気がする。]
#BGM[]
#Image[]
#BackGround[]
#Player[FREE]
#ScriptVersion[2]

script_enemy_main {
	let imgBoss = "script\img\ExRumia.png";
	let p_circle = GetCurrentScriptDirectory ~ "img\powercircle.png";
	let shotdir = GetCurrentScriptDirectory ~ "heart_bullet.txt";
	let shotSE  = GetCurrentScriptDirectory ~ "se\tan00.wav";
	let bellSE  = GetCurrentScriptDirectory ~ "se\kira01_r.wav";
	let conSE   = GetCurrentScriptDirectory ~ "se\eco00_r.wav";

	let c_ang = 0;	//魔法陣回転用変数
	let c_scale;	//魔法陣の表示倍率
	
	@Initialize {
		SetLife(2000);
		SetTimer(90);
		SetScore(10000000);
		
		SetMovePosition02(GetCenterX(),GetClipMinY +120,30);
		
		LoadGraphic(imgBoss);
		LoadGraphic(p_circle);


		LoadSE(shotSE);
		LoadSE(bellSE);
		LoadSE(conSE);
		
		LoadUserShotData(shotdir);
		
		SetDamageRate(50,0);
		
		CutIn(YOUMU,"抑制「スーパーエゴ」",0,0,0,0,0);
		
		TMain;
	}
	
	@MainLoop {
	        SetCollisionA(GetX, GetY, 32);
		SetCollisionB(GetX, GetY, 16);
		
		yield;
	}
	
	@DrawLoop {
		circle;

		SetTexture(imgBoss);
		SetGraphicRect(0,0,64,64);
		SetRenderState(ALPHA);
		SetAlpha(255);
		SetGraphicAngle(0,0,0);
		SetGraphicScale(1, 1);
		DrawGraphic(GetX, GetY);
	}
	
	@Finalize {
		DeleteGraphic(imgBoss);
	}
	
	task TMain {

		yield;

		bombregist();
		
		wait(60);

		con(75);
		wait(60);

		//ハート展開開始
		let d_ang = 4;
		let p1_ang = 15;
		let p2_ang = 15;
		let r = 0;
		let w_time = 0;
		loop(12){
			loop(12){
				let s1_ang = p1_ang;
				let s2_ang = p2_ang;
				heartshot(GetX+r*cos(s2_ang),GetY+r*sin(s2_ang), 0.20, 0.0165, 4.5, s2_ang, s2_ang+90, 4, 10, 0.625, int(w_time));
				heartshot(GetX+r*cos(s1_ang),GetY+r*sin(s1_ang), 0.20, 0.0165, 4.5, s1_ang, s1_ang-90, 3, 10, -0.625, int(w_time));
				p1_ang += 30;
				p2_ang += 30;
			}
			r += 30;
			w_time += 17.5;
			PlaySE(shotSE);
			DelayPlaySE(bellSE, 5);
			wait(18);
		}

		//そして画面外をぐるぐると
		r = 360;
		loop{
			w_time = 210 - rand_int(-2,5);
			loop(12){
				let s1_ang = p1_ang + rand(-3, 3);
				let s2_ang = p2_ang + rand(-3, 3);
				heartshot(GetX+r*cos(s2_ang),GetY+r*sin(s2_ang), 0.20, 0.0165, 4.5, s2_ang, s2_ang+90, 4, 10, 0.625,w_time);
				heartshot(GetX+r*cos(s1_ang),GetY+r*sin(s1_ang), 0.20, 0.0165, 4.5, s1_ang, s1_ang-90, 3, 10, -0.625,w_time);
				p1_ang += 30;
				p2_ang += 30;
			}
			p1_ang += d_ang;
			p2_ang -= d_ang;
			PlaySE(shotSE);
			DelayPlaySE(bellSE, 5);
			wait(17);
		}
	}
	
	task heartshot(x,y,speed,accel,speed_lim,angle1,angle2,graph,delay,curve,w_time){
		let time = 0;
		let obj0 = Obj_Create(OBJ_SHOT);//弾オブジェクトを作成
		Obj_SetX(obj0,x);//x座標設定
		Obj_SetY(obj0,y);//y座標設定;
		ObjShot_SetGraphic(obj0, graph);//画像設定
		ObjShot_SetDelay(obj0, delay);//遅延時間設定
		Obj_SetAutoDelete(obj0, false);
		Obj_SetSpeed(obj0,0);//速度設定
		Obj_SetAngle(obj0,angle1);//移動角度設定

		wait(5);

		let obj = Obj_Create(OBJ_SHOT);//弾オブジェクトを作成
		Obj_SetX(obj,x);//x座標設定
		Obj_SetY(obj,y);//y座標設定;
		ObjShot_SetGraphic(obj, graph);//画像設定
		ObjShot_SetDelay(obj, delay);//遅延時間設定
		Obj_SetAutoDelete(obj, false);
		Obj_SetSpeed(obj,speed);//速度設定
		Obj_SetAngle(obj,angle2);//移動角度設定

		wait(delay);

		Obj_Delete(obj0);
		
		while( !Obj_BeDeleted(obj) ){//削除されるまでループを実行
			if((accel < 0 && speed + accel > speed_lim)||(accel > 0 && speed - accel < speed_lim)){
				speed += accel;
			}else{
				speed = speed_lim;
			}
			Obj_SetSpeed(obj, speed);

			angle2 += curve;
			Obj_SetAngle(obj, angle2);

			if(time == w_time){
				Obj_SetSpeed(obj, 0.5);
				ObjShot_FadeDelete(obj);
			}
			time += 1;
			
			yield;
		}
	}

	//遅延SE
	task DelayPlaySE(let sePass, let delay){
		loop(delay){yield;}
		PlaySE(sePass);
	}

	task bombregist(){
		let bregist = 0;
		loop{
			if(OnBomb == true){
				SetInvincibility(3000);
				bregist = 1;
			}
			else if(OnBomb == false && bregist == 1){
				SetInvincibility(0);
				bregist = 0;
			}
			wait(1);
		}
	}

	function con(let time){
		Concentration01(time);
		PlaySE(conSE);
	}

	function wait(w) {
        	loop(w) { yield; }
	}

//魔法陣
	sub circle{
		SetTexture(p_circle);
		SetGraphicRect(0,0,266,266);
		SetRenderState(ADD);
		c_ang -= 7.5;	//回転速度
		if(c_ang >= 360 / 0.45){c_ang -= 360 / 0.45;}
		SetGraphicAngle(0,0,c_ang);
		c_scale = (0.06 * sin(c_ang * 0.45)) + 0.9;
		SetGraphicScale(c_scale, c_scale);

		DrawGraphic(GetX, GetY);
	}
}